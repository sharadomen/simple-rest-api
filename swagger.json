{
  "swagger": "2.0",
  "info": {
    "description": "This is an experimental Todo Web API. There is no any database system behind it. It holds the item data in memory. You can use it in your experimental projects. You can find source code of this web api at [https://github.com/metehansenol/todo-api-with-node-express](https://github.com/metehansenol/todo-api-with-node-express)",
    "version": "1.0.0",
    "title": "Todo Web API",
    "contact": {
      "email": "metehansenol@gmail.com"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "host": "todowebapi.herokuapp.com",
  "tags": [
    {
      "name": "items",
      "description": "Operations about todo items"
    }
  ],
  "schemes": [
    "https"
  ],
  "paths": {
    "/items": {
      "get": {
        "tags": [
          "items"
        ],
        "summary": "Get all items",
        "description": "Returns item array",
        "operationId": "getItems",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "schema": {
              "$ref": "#/definitions/Item"
            }
          }
        }
      },
      "post": {
        "tags": [
          "items"
        ],
        "summary": "Create a new item",
        "description": "",
        "operationId": "createNewItem",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Item title that needs to be create new item",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateItemRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          }
        }
      }
    },
    "/items/{itemId}": {
      "get": {
        "tags": [
          "items"
        ],
        "summary": "Get an item by Id",
        "description": "Returns a single item",
        "operationId": "getItemById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "itemId",
            "in": "path",
            "description": "Id of item to return",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "schema": {
              "$ref": "#/definitions/Item"
            }
          },
          "404": {
            "description": "Item not found"
          }
        }
      },
      "put": {
        "tags": [
          "items"
        ],
        "summary": "Update an existing item",
        "description": "",
        "operationId": "updateItem",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "itemId",
            "in": "path",
            "description": "Id of item to return",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "body",
            "in": "body",
            "description": "Item object that needs to be update",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateItemRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "404": {
            "description": "Item not found"
          }
        }
      },
      "delete": {
        "tags": [
          "items"
        ],
        "summary": "Deletes an item",
        "description": "",
        "operationId": "deleteItem",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "itemId",
            "in": "path",
            "description": "Item id to delete",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation"
          }
        }
      }
    }
  },
  "definitions": {
    "Item": {
      "type": "object",
      "required": [
        "id",
        "title"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "title": {
          "type": "string"
        },
        "order": {
          "type": "integer",
          "format": "int32"
        },
        "completed": {
          "type": "boolean"
        },
        "createdOn": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "CreateItemRequest": {
      "type": "object",
      "required": [
        "title"
      ],
      "properties": {
        "title": {
          "type": "string"
        }
      }
    },
    "UpdateItemRequest": {
      "type": "object",
      "required": [
        "title"
      ],
      "properties": {
        "title": {
          "type": "string"
        },
        "order": {
          "type": "integer",
          "format": "int32"
        },
        "completed": {
          "type": "boolean"
        }
      }
    }
  },
  "externalDocs": {
    "description": "Find out more about this API",
    "url": "https://medium.com/@metehansenol/creating-a-restful-web-api-with-node-js-and-express-js-from-scratch-9ba6e21d58b9?source=friends_link&sk=55890ea51731640749f882c41135af65"
  }
}
